// prisma/schema.prisma
datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(uuid()) @map("_id")
  name                  String?
  firstName             String?
  lastName              String?
  displayName           String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  UserSubscription      UserSubscription?
  cartItems     String[]
  subscriptionId   String?
  subscriptionStatus String?
  subscriptionExpiry DateTime?
}

model UserApiLimit {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(uuid()) @map("_id")
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id])

  @@unique([stripeCustomerId, stripeSubscriptionId])
}

model Account {
  id                String  @id @default(uuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId])
}


model Product {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  productId            String    @unique
  type                 String
  pack                 String?
  typeSmallDescription String?  
  price                Float
  tag                  String?
  category             String
  title                String
  description          String
  smallDescription     String?
  animationCount       Int?
  buttonText           String
  files                String[]
  compatibility        String[]  
  highlights           String[]  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}


model Subscription {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  plan          String
  status        String
  expiryDate    DateTime
  createdAt     DateTime @default(now())
}



model Icon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  iconStyle  String
  license    String
  category   String
  tags       String[]
  files      String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("icons")
}

model Pack {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  subtitle             String
  category             String
  description          String
  packagePrice         Float
  discount             Float
  thumbnailUrl         String
  illustrationUrl      String
  animationUrl         String
  featureImageUrl      String
  productViewImageUrl  String[]
  graphicFileIncluded  String
  compatibility        String
  tags                 String[]
  keyFeatures          String[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("packs")
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  name          String
  email         String
  message       String
  projectType   ProjectType
  budget        String
  attachmentUrl String?  // URL to the uploaded file (e.g., AWS S3, Cloudinary)
  createdAt     DateTime @default(now())

  @@map("orders") // Optional: Maps the model to the "orders" collection in MongoDB
}

enum ProjectType {
  Lottie
  Rive
  Illustration
  Animation
  WebDesign
  UIDesign
  Branding
  ExplainerVideo
}